{
  "tests": [
    {
      "id": 0,
      "patch": [
        {
          "position": "main",
          "code": "// Test 1: DCT/IDCT\nstd::vector<double> x{1, 2, 3, 4, 4, 3, 2, 1};\nauto y = LossyCompress(x, 8);\nfor(double e : y) std::cout << e << \" \";\nstd::cout << std::endl;\nauto xx = LossyDecompress(y);\nfor(auto e : xx) std::cout << e << \" \";"
        }
      ],
      "expect": "20 0 -6.30864 0 0 0 -0.448342 8\n1 2 3 4 4 3 2 1"
    },
    {
      "id": 1,
      "patch": [
        {
          "position": "main",
          "code": "// Test 2: uzorci zbira nekoliko harmonijskih funkcija kompresuju se odlicno\nconst double PI = 4 * std::atan(1);\nstd::vector<double> x(128);\nfor(int i = 0; i < 128; i++) {\n    double t = PI * (i + 0.5) / 128;\n    x[i] = 3 * std::cos(t) - 0.4 * std::cos(2 * t) + 0.2 * std::cos(3 * t);\n}\nauto y = LossyCompress(x, 5);\nauto xx = LossyDecompress(y);\ndouble maxerr = 0;\nfor(int i = 0; i < x.size(); i++)\nif(std::fabs(xx[i] - x[i]) > maxerr) maxerr = std::fabs(xx[i] - x[i]);\nif(maxerr < 1e-10) std::cout << \"OK\";\n"
        }
      ],
      "expect": "OK"
    },
    {
      "id": 2,
      "patch": [
        {
          "position": "main",
          "code": "// Test 3: kompresija na polovicu dužine\nconst double PI = 4 * std::atan(1);\nstd::vector<double> x(128);\nfor(int i = 0; i < 128; i++) x[i] = i;\nauto y = LossyCompress(x, 64);\nauto xx = LossyDecompress(y);\ndouble toterr = 0;\nfor(int i = 0; i < x.size(); i++) toterr += std::fabs(xx[i] - x[i]);\nstd::cout << toterr / 128;"
        }
      ],
      "expect": "0.0109891"
    },
    {
      "id": 3,
      "patch": [
        {
          "position": "main",
          "code": "// Test 4: kompresija na osminu dužine\nconst double PI = 4 * std::atan(1);\nstd::vector<double> x(128);\nfor(int i = 0; i < 128; i++) x[i] = i;\nauto y = LossyCompress(x, 16);\nauto xx = LossyDecompress(y);\ndouble toterr = 0;\nfor(int i = 0; i < x.size(); i++) toterr += std::fabs(xx[i] - x[i]);\nstd::cout << toterr / 128;\n"
        }
      ],
      "expect": "0.184188"
    },
    {
      "id": 4,
      "patch": [
        {
          "position": "main",
          "code": "// Test 5: kompresija izuzeci\ntry {\n    LossyCompress({1, 2, 3, 4}, -1);\n}\ncatch(std::range_error e) {\n    std::cout << \"'\" << e.what() << \"'\" << std::endl;\n}\ntry {\n    LossyCompress({1, 2, 3, 4}, 5);\n}\ncatch(std::range_error e) {\n    std::cout << \"'\" << e.what() << \"'\" << std::endl;\n}\ntry {\n    LossyCompress({1, 2, 3, 4, 5}, 2);\n}\ncatch(std::range_error e) {\n    std::cout << \"'\" << e.what() << \"'\" << std::endl;\n}\ntry {\n    LossyDecompress({0, 0, 0, 0, 3});\n}\ncatch(std::logic_error e) {\n    std::cout << \"'\" << e.what() << \"'\" << std::endl;\n}\ntry {\n    LossyDecompress({0, 0, 0, 0, 0, 0, 4});\n}\ncatch(std::logic_error e) {\n    std::cout << \"'\" << e.what() << \"'\" << std::endl;\n}\ntry {\n    LossyDecompress({0, 0, 0, 0, 1.5});\n}\ncatch(std::logic_error e) {\n    std::cout << \"'\" << e.what() << \"'\";\n}"
        }
      ],
      "expect": "'Bad new size'\n'Bad new size'\n'Data size must be a power of two'\n'Bad compressed sequence'\n'Bad compressed sequence'\n'Bad compressed sequence'"
    }
  ]
}