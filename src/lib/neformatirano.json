{&quot;id&quot;:1906,&quot;name&quot;:&quot;Algoritmi i strukture podataka (2016\/2017), Zadaca 5, zadatak 1&quot;,&quot;languages&quot;:[&quot;C++&quot;],&quot;tools&quot;:{&quot;compile&quot;:{&quot;require&quot;:&quot;g++&quot;,&quot;features&quot;:[&quot;optimize&quot;,&quot;warn&quot;,&quot;pedantic&quot;,&quot;C++11&quot;]},&quot;compile[debug]&quot;:{&quot;require&quot;:&quot;g++&quot;,&quot;features&quot;:[&quot;debug&quot;,&quot;C++11&quot;,&quot;asan&quot;]},&quot;execute&quot;:{&quot;require&quot;:&quot;asan&quot;},&quot;debug&quot;:[],&quot;profile[asan]&quot;:{&quot;require&quot;:&quot;asan&quot;,&quot;fast&quot;:true,&quot;input_file&quot;:&quot;stderr.txt&quot;}},&quot;tests&quot;:[{&quot;id&quot;:1907,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\/\/ Osnovni test funkcionalnosti HashMapaLan\nHashMapaLan<std::string,std::string> m;\nm.definisiHashFunkciju(djbhash);\nm[\&quot;Sarajevo\&quot;] = \&quot;BiH\&quot;;\nm[\&quot;Zagreb\&quot;] = \&quot;Hrvatska\&quot;;\ncout << m.brojElemenata() << \&quot; \&quot; << m[\&quot;Zagreb\&quot;] << \&quot; '\&quot;; \/\/ 2 Hrvatska\n\n\/\/ Test praznih elemenata\ncout << m[\&quot;Beograd\&quot;] <<\&quot;' '\&quot;; \/\/ ''\ncout << m[\&quot;zagreb\&quot;] << \&quot;' \&quot;; \/\/ ''\nm.obrisi(\&quot;Zagreb\&quot;);\n\n\/\/ Potpuno korektna HashMapaLan nece kreirati objekte \&quot;Beograd\&quot; i \&quot;zagreb\&quot;\n\/\/ jer oni nemaju vrijednosti pa ce se ispod ispisati 1\n\/\/ Ali to zahtijeva implementaciju \&quot;Pristupnika\&quot; pa cemo priznavati\n\/\/ rjesenje koje ispise broj 3\ncout << m.brojElemenata(); \/\/ 3 ili 1\n\n\/\/ Test brisanja\ncout << \&quot; '\&quot; << m[\&quot;Zagreb\&quot;] << \&quot;' \&quot; ; \/\/ ''\nm.obrisi();\ncout << m.brojElemenata(); \/\/ 0\ncout << \&quot; '\&quot; << m[\&quot;Sarajevo\&quot;] << \&quot;' \&quot;; \/\/ ''&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;above_main&quot;,&quot;code&quot;:&quot;#include <string>\nunsigned int djbhash(std::string ulaz, unsigned int max) {\n\tunsigned int suma=5381; \n\/\/ 5381 je pocetna vrijednost \n\/\/ koja poboljsava distribuciju\n\tfor (int i(0); i<ulaz.length(); i++)\n\t\tsuma = suma*33 + ulaz[i];\n\treturn suma % max;\n}&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;2 Hrvatska '' '' 1 '' 0 ''&quot;,&quot;2 Hrvatska '' '' 3 '' 0 ''&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:1908,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;HashMapaLan<std::string,std::string> m;\nm.definisiHashFunkciju(djbhash);\nm[\&quot;Sarajevo\&quot;] = \&quot;BiH\&quot;;\nm[\&quot;Zagreb\&quot;] = \&quot;Hrvatska\&quot;;\n{\n        \/\/ Konstruktor kopije\n\tHashMapaLan<std::string,std::string> m2(m);\n        \/\/ Operator dodjele\n\tHashMapaLan<std::string,std::string> m3;\n\tm3.definisiHashFunkciju(djbhash);\n\tm3[\&quot;Kiseljak\&quot;] = \&quot;BiH\&quot;;\n\tcout << (m3=m).brojElemenata() << \&quot; \&quot;; \/\/ 2\n        \/\/ Destruktivna samododjela\n\tcout << (m=m).brojElemenata() << \&quot; \&quot;; \/\/ 2\n\n        \/\/ Plitka kopija\n\tm.obrisi(\&quot;Sarajevo\&quot;);\n\tcout << m2.brojElemenata() << \&quot; \&quot;; \/\/ 2\n        cout << m2[\&quot;Sarajevo\&quot;] << \&quot; \&quot;; \/\/ BiH\n        cout << m3.brojElemenata() << \&quot; \&quot;; \/\/ 2\n        cout << m3[\&quot;Sarajevo\&quot;] << \&quot; \&quot;; \/\/ BiH\n}\ncout << m.brojElemenata(); \/\/ 1\ncout << \&quot; '\&quot; << m[\&quot;Sarajevo\&quot;] << \&quot;' \&quot;; \/\/ ''\nm.obrisi();\ncout << m.brojElemenata(); \/\/ 0\ncout << \&quot; '\&quot; << m[\&quot;Zagreb\&quot;] << \&quot;'\&quot;; \/\/ ''&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;above_main&quot;,&quot;code&quot;:&quot;#include <string>\nunsigned int djbhash(std::string ulaz, unsigned int max) {\n\tunsigned int suma=5381; \n\/\/ 5381 je pocetna vrijednost \n\/\/ koja poboljsava distribuciju\n\tfor (int i(0); i<ulaz.length(); i++)\n\t\tsuma = suma*33 + ulaz[i];\n\treturn suma % max;\n}&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;2 2 2 BiH 2 BiH 1 '' 0 ''&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:1909,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\/\/ Test rada sa tipom koji nema default konstruktor (std::vector)\nHashMapaLan <std::string, std::vector<std::string> > m;\nm.definisiHashFunkciju(djbhash);\nstd::vector<std::string> gradovi;\ngradovi.push_back(\&quot;Sarajevo\&quot;);\ngradovi.push_back(\&quot;Mostar\&quot;);\ngradovi.push_back(\&quot;Banja Luka\&quot;);\nm[\&quot;BiH\&quot;]=gradovi;\ncout << m[\&quot;BiH\&quot;].size() << \&quot; \&quot;;\nm[\&quot;BiH\&quot;].push_back(\&quot;Tuzla\&quot;);\ncout << m[\&quot;BiH\&quot;][0] << \&quot; \&quot; << m[\&quot;BiH\&quot;][3] << \&quot; \&quot; << m[\&quot;BiH\&quot;].size();&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;above_main&quot;,&quot;code&quot;:&quot;#include <string>\n#include <vector>\nunsigned int djbhash(std::string ulaz, unsigned int max) {\n\tunsigned int suma=5381; \n\/\/ 5381 je pocetna vrijednost \n\/\/ koja poboljsava distribuciju\n\tfor (int i(0); i<ulaz.length(); i++)\n\t\tsuma = suma*33 + ulaz[i];\n\treturn suma % max;\n}&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;3 Sarajevo Tuzla 4&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:1910,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\/\/ Const korektnost i test rada sa tipom int\nHashMapaLan <int, int> m;\nm.definisiHashFunkciju(mojhash);\nm[100] = 200;\nconst HashMapaLan <int, int>&amp; m2(m);\nm[200] = 300;\ncout << m2.brojElemenata() << \&quot; \&quot;; \/\/ 2\ncout << m2[200] << \&quot; \&quot;; \/\/ 300\n\n\/\/ Ovdje se sigurno nece kreirati objekat m2[300] jer je m2 const\ncout << m2[300] << \&quot; \&quot;; \/\/ 0\ncout << m2.brojElemenata() << \&quot; \&quot;; \/\/ 2\nm[300] = 400;\ncout << m2[300] << \&quot; \&quot;; \/\/ 400\ncout << m2.brojElemenata(); \/\/ 3&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;above_main&quot;,&quot;code&quot;:&quot;unsigned int mojhash(int ulaz, unsigned int max) {\n\tunsigned int suma=23; \n\tsuma = suma*31 + ulaz;\n\treturn suma % max;\n}&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;2 300 0 2 400 3&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:2103,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;HashMapaLan<int, int> m;\nm.definisiHashFunkciju(glupihash);\n\/\/ Test ponasanja sa velikim brojem kolizija\nm[1] = 100;\nm[2] = 200;\nm[3] = 300;\nm[4] = 400;\nm[5] = 500;\ncout << m[1] << \&quot; \&quot;;\nm.obrisi(2);\ncout << m[1] << \&quot; \&quot; << m[3] << \&quot; \&quot;;\ncout << m[4] << \&quot; \&quot; << m[5] << \&quot; \&quot;;\ncout << m[2];&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;above_main&quot;,&quot;code&quot;:&quot;\/\/ Hash funkcija koja uvijek vraca isto\nunsigned int glupihash(int ulaz, \nunsigned int max) {\n\treturn max-1;\n}&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;100 100 300 400 500 0&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:2104,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;HashMapaLan<int, int> m;\nm.definisiHashFunkciju(glupihash);\n\/\/ Test ponasanja sa velikim brojem kolizija\nfor (int i(0); i<1002; i++)\n   m[i]=i+10000;\ncout << m[1001];&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;above_main&quot;,&quot;code&quot;:&quot;\/\/ Hash funkcija koja uvijek vraca isto\nunsigned int glupihash(int ulaz, \nunsigned int max) {\n\treturn max-1;\n}&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;11001&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:2105,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;UsmjereniGraf<bool> *g = new ListaGraf<bool>(6);\n  g->dodajGranu(0, 1, 2.5);\n  g->dodajGranu(1, 2, 1.2);\n  g->dodajGranu(1, 3, 0.1);\n  g->dodajGranu(3, 3, -4.0);\n  g->dodajGranu(2, 4, 3.14);\n  g->dodajGranu(2, 3, 2.73);\n  g->dodajGranu(3, 5, 1);\n  g->dodajGranu(5, 2, -5.0);\n  for (int i = 0; i < 6; i++)\n    for (int j = 0; j < 6; j++)\n      cout << g->postojiGrana(i, j);\n  delete g;&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;010000001100000110000101000000001000&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:2106,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;UsmjereniGraf<bool> *g = new ListaGraf<bool>(6);\n  g->dodajGranu(0, 1, 2.5);\n  g->dodajGranu(1, 2, 1.2);\n  g->dodajGranu(1, 3, 0.1);\n  g->dodajGranu(3, 3, -4.0);\n  g->dodajGranu(2, 4, 3.14);\n  g->dodajGranu(2, 3, 2.73);\n  g->dodajGranu(3, 5, 1);\n  g->dodajGranu(5, 2, -5.0);\n  g->obrisiGranu(1,2);\n  g->obrisiGranu(3,5);\n  for (int i = 0; i < 6; i++)\n    for (int j = 0; j < 6; j++)\n      cout << g->postojiGrana(i, j);\n  delete g;&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;010000000100000110000100000000001000&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:2107,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;UsmjereniGraf<bool> *g = new ListaGraf<bool>(4);\n  g->dodajGranu(0, 1, 2.5);\n  g->dodajGranu(1, 2, 1.2);\n  g->dodajGranu(1, 3, 0.1);\n  g->dodajGranu(3, 3, -4.0);\n  g->postaviTezinuGrane(1, 2, 0.2);\n  for (int i = 0; i < 4; i++)\n    for (int j = 0; j < 4; j++)\n      if (g->postojiGrana(i,j))\n        cout << \&quot;(\&quot; << i << \&quot;,\&quot; << j << \&quot;) -> \&quot; << g->dajTezinuGrane(i, j) << \&quot;; \&quot;;\n  delete g;&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;(0,1) -> 2.5; (1,2) -> 0.2; (1,3) -> 0.1; (3,3) -> -4;&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:2108,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;UsmjereniGraf<std::string> *g = new ListaGraf<std::string>(4);\n  g->dodajGranu(0, 1, 2.5);\n  g->dodajGranu(1, 2, 1.2);\n  g->dodajGranu(1, 3, 0.1);\n  g->dodajGranu(3, 3, -4.0);\n  g->postaviOznakuGrane(1, 3, \&quot;aa\&quot;);\n  for (int i = 0; i < 4; i++)\n    for (int j = 0; j < 4; j++)\n      if (g->postojiGrana(i,j))\n        cout << \&quot;(\&quot; << i << \&quot;,\&quot; << j << \&quot;) -> '\&quot; << g->dajOznakuGrane(i, j) << \&quot;'; \&quot;;\n  delete g;&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;above_main&quot;,&quot;code&quot;:&quot;#include<string>&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;(0,1) -> ''; (1,2) -> ''; (1,3) -> 'aa'; (3,3) -> '';&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:2109,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;UsmjereniGraf<std::string> *g = new ListaGraf<std::string>(4);\n  g->postaviOznakuCvora(0,\&quot;a\&quot;);\n  g->postaviOznakuCvora(1,\&quot;bcd\&quot;);\n  for (int i = 0; i < 4; i++)\n      cout << \&quot;(\&quot; << i << \&quot;) -> '\&quot; << g->dajOznakuCvora(i) << \&quot;'; \&quot;;\n  delete g;&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;above_main&quot;,&quot;code&quot;:&quot;#include<string>&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;(0) -> 'a'; (1) -> 'bcd'; (2) -> ''; (3) -> '';&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:2110,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;UsmjereniGraf<std::string> *g = new ListaGraf<std::string>(4);\n  cout << g->dajCvor(0).dajRedniBroj() << \&quot;; \&quot;;\n  g->postaviOznakuCvora(1, \&quot;aaa\&quot;);\n  g->dajCvor(2).postaviOznaku(\&quot;bbb\&quot;);\n  for (int i = 0; i < 4; i++)\n      cout << \&quot;(\&quot; << i << \&quot;) -> '\&quot; << g->dajOznakuCvora(i) << \&quot;','\&quot; << g->dajCvor(i).dajOznaku() << \&quot;'; \&quot;;\n  delete g;&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;above_main&quot;,&quot;code&quot;:&quot;#include<string>&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;0; (0) -> '',''; (1) -> 'aaa','aaa'; (2) -> 'bbb','bbb'; (3) -> '','';&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:2111,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;UsmjereniGraf<std::string> *g = new ListaGraf<std::string>(4);\n  g->dodajGranu(0, 1, 2.5);\n  g->dodajGranu(1, 2, 1.2);\n  g->dodajGranu(1, 3, 0.1);\n  g->dodajGranu(3, 3, -4.0);\n  g->postaviOznakuGrane(3, 3, \&quot;aa\&quot;);\n  g->dajGranu(0,1).postaviOznaku(\&quot;bb\&quot;);\n  for (int i = 0; i < 4; i++)\n    for (int j = 0; j < 4; j++)\n      if (g->postojiGrana(i,j))\n        cout << \&quot;(\&quot; << i << \&quot;,\&quot; << j << \&quot;) -> '\&quot; << g->dajOznakuGrane(i, j) << \&quot;','\&quot; << g->dajGranu(i, j).dajOznaku() << \&quot;'; \&quot;;\ndelete g;&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;above_main&quot;,&quot;code&quot;:&quot;#include<string>&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;(0,1) -> 'bb','bb'; (1,2) -> '',''; (1,3) -> '',''; (3,3) -> 'aa','aa';&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:2112,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;UsmjereniGraf<bool> *g = new ListaGraf<bool>(6);\n    g->dodajGranu(0, 1, 2.5);\n    g->dodajGranu(1, 0, 1.2);\n    g->dodajGranu(1, 2, 0.1);\n    g->dodajGranu(0, 0, 3.14);\n    for (GranaIterator<bool> iter = g->dajGranePocetak();\n         iter != g->dajGraneKraj(); ++iter)\n      cout << \&quot;(\&quot; << (*iter).dajPolazniCvor().dajRedniBroj() << \&quot;,\&quot;\n           << (*iter).dajDolazniCvor().dajRedniBroj() << \&quot;) -> \&quot;\n           << (*iter).dajTezinu() << \&quot;; \&quot;;\n  delete g;&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;(0,0) -> 3.14; (0,1) -> 2.5; (1,0) -> 1.2; (1,2) -> 0.1;&quot;,&quot;(0,1) -> 2.5; (0,0) -> 3.14; (1,0) -> 1.2; (1,2) -> 0.1;&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:2113,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;ListaGraf<bool> g(6);\ng.dodajGranu(0, 1, 0);\ncout << g.postojiGrana(0,1);\ncout << g.postojiGrana(0,2);&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;10&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:2114,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;UsmjereniGraf<bool> *g = new ListaGraf<bool>(6);\n    g->dodajGranu(0, 1, 2.5);\n    g->dodajGranu(1, 2, 1.2);\n    g->dodajGranu(1, 3, 0.1);\n    g->dodajGranu(2, 4, 3.14);\n    g->dodajGranu(2, 3, 2.73);\n    g->dodajGranu(3, 5, 1);\n    g->dodajGranu(5, 2, -5.0);\n    std::vector<Cvor<bool> > dfs_obilazak;\n    dfs(g, dfs_obilazak, g->dajCvor(0));\n    for (int i = 0; i < dfs_obilazak.size(); i++)\n      cout << dfs_obilazak[i].dajRedniBroj() << \&quot;,\&quot;;\n  delete g;&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;above_main&quot;,&quot;code&quot;:&quot;#include <vector>&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;0,1,2,3,5,4,&quot;,&quot;0,1,2,4,3,5,&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:2115,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;UsmjereniGraf<bool> *g = new ListaGraf<bool>(6);\n    g->dodajGranu(0, 1, 2.5);\n    g->dodajGranu(1, 2, 1.2);\n    g->dodajGranu(1, 3, 0.1);\n    g->dodajGranu(2, 4, 3.14);\n    g->dodajGranu(2, 3, 2.73);\n    g->dodajGranu(3, 5, 1);\n    g->dodajGranu(5, 2, -5.0);\n    std::vector<Cvor<bool> > bfs_obilazak;\n    bfs(g, bfs_obilazak, g->dajCvor(0));\n    for (int i = 0; i < bfs_obilazak.size(); i++)\n      cout << bfs_obilazak[i].dajRedniBroj() << \&quot;,\&quot;;\n  delete g;&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;above_main&quot;,&quot;code&quot;:&quot;#include <vector>&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;0,1,2,3,4,5,&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:2116,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;UsmjereniGraf<std::string> *g = new ListaGraf<std::string>(4);\n  g->dodajGranu(0, 1, 2.5);\n  g->dodajGranu(1, 2, 1.2);\n  g->dodajGranu(1, 3, 0.1);\n  g->dodajGranu(3, 3, -4.0);\n  g->postaviOznakuGrane(3, 3, \&quot;aa\&quot;);\n  Grana<std::string> grana = g->dajGranu(0,1);\n  grana.postaviOznaku(\&quot;bb\&quot;);\n  grana.postaviTezinu(3.5);\n  for (int i = 0; i < 4; i++)\n    for (int j = 0; j < 4; j++)\n      if (g->postojiGrana(i,j)) {\n        cout << \&quot;(\&quot; << i << \&quot;,\&quot; << j << \&quot;) -> '\&quot; << g->dajOznakuGrane(i, j) << \&quot;','\&quot; << g->dajGranu(i, j).dajOznaku();\n        cout << \&quot;',\&quot; << g->dajTezinuGrane(i, j) << \&quot;; \&quot;;\n      }\ndelete g;&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;above_main&quot;,&quot;code&quot;:&quot;#include <string>&quot;,&quot;use_markers&quot;:true}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;(0,1) -> 'bb','bb',3.5; (1,2) -> '','',1.2; (1,3) -> '','',0.1; (3,3) -> 'aa','aa',-4;&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]}],&quot;version&quot;:&quot;3&quot;,&quot;prepare&quot;:[&quot;compile&quot;],&quot;code&quot;:&quot;200&quot;}